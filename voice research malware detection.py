import tkinter as tk
from tkinter import messagebox
import speech_recognition as sr
import webbrowser
import requests

# Initialize recognizer
recognizer = sr.Recognizer()
#API key maker
'''#how to make an API key===============================
import secrets

def generate_api_key(length=8):
    # Generate a random hexadecimal token of the specified length
    return secrets.token_hex(length)

# Generate a 32-character API key
api_key = generate_api_key()
print("Generated API Key:", api_key)
'''
# Function to check if URL is safe using Google's Safe Browsing API
def is_url_safe(url):
    api_key = 'b619b277'  # Replace with your actual API key
    safe_browsing_url = 'https://safebrowsing.googleapis.com/v4/threatMatches:find'
    payload = {
        "client": {
            "clientId": "HTI",
            "clientVersion": "1.0"
        },
        "threatInfo": {
            "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING"],
            "platformTypes": ["WINDOWS"],
            "threatEntryTypes": ["URL"],
            "threatEntries": [
                {"url": url}
            ]
        }
    }
    headers = {'Content-Type': 'application/json'}
    response = requests.post(safe_browsing_url, params={'key': api_key}, json=payload, headers=headers)
    result = response.json()
    return 'matches' not in result
#Voice research
# Function to capture speech and perform a web search
def search_with_speech():
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source, duration=1)
        audio = recognizer.listen(source)
        
        try:
            # Recognize speech using Google Web Speech API
            query = recognizer.recognize_google(audio, language=language_var.get())
            search_entry.delete(1.0, tk.END)
            search_entry.insert(tk.END, query)
            
            # Perform a web search
            url = "https://www.google.com/search?q=" + query
            if is_url_safe(url):
                webbrowser.open(url)
            else:
                messagebox.showerror("Warning", "The site may be unsafe.")
        except sr.UnknownValueError:
            messagebox.showerror("Error", "Google Web Speech could not understand the audio")
        except sr.RequestError as e:
            messagebox.showerror("Error", f"Could not request results from Google Web Speech service; {e}")

# Function to check if the current URL is safe and show a message box
def check_url_safety():
    query = search_entry.get("1.0", tk.END).strip()
    if not query:
        messagebox.showinfo("Info", "No query entered.")
        return
    
    url = "https://www.google.com/search?q=" + query
    if is_url_safe(url):
        messagebox.showinfo("Safe", "The site is safe.")
    else:
        messagebox.showerror("Unsafe", "The site may be unsafe.")

# List of supported languages and dialects
languages = {
    "Afrikaans": "af-ZA",
    "Arabic (Egypt)": "ar-EG",
    "Arabic (Jordan)": "ar-JO",
    "Arabic (Kuwait)": "ar-KW",
    "Arabic (Lebanon)": "ar-LB",
    "Arabic (Qatar)": "ar-QA",
    "Arabic (UAE)": "ar-AE",
    "Arabic (Morocco)": "ar-MA",
    "Arabic (Iraq)": "ar-IQ",
    "Arabic (Algeria)": "ar-DZ",
    "Arabic (Bahrain)": "ar-BH",
    "Arabic (Lybia)": "ar-LY",
    "Arabic (Oman)": "ar-OM",
    "Arabic (Saudi Arabia)": "ar-SA",
    "Arabic (Tunisia)": "ar-TN",
    "Arabic (Yemen)": "ar-YE",
    "Basque": "eu-ES",
    "Bulgarian": "bg-BG",
    "Catalan": "ca-ES",
    "Czech": "cs-CZ",
    "Dutch": "nl-NL",
    "English (Australia)": "en-AU",
    "English (Canada)": "en-CA",
    "English (India)": "en-IN",
    "English (New Zealand)": "en-NZ",
    "English (South Africa)": "en-ZA",
    "English (United Kingdom)": "en-GB",
    "English (United States)": "en-US",
    "Finnish": "fi-FI",
    "French": "fr-FR",
    "Galician": "gl-ES",
    "German": "de-DE",
    "Hebrew": "he-IL",
    "Hungarian": "hu-HU",
    "Icelandic": "is-IS",
    "Italian": "it-IT",
    "Indonesian": "id-ID",
    "Japanese": "ja-JP",
    "Korean": "ko-KR",
    "Lithuanian": "lt-LT",
    "Latvian": "lv-LV",
    "Macedonian": "mk-MK",
    "Norwegian": "no-NO",
    "Polish": "pl-PL",
    "Portuguese (Brazil)": "pt-BR",
    "Portuguese (Portugal)": "pt-PT",
    "Romanian": "ro-RO",
    "Russian": "ru-RU",
    "Serbian": "sr-RS",
    "Slovak": "sk-SK",
    "Slovenian": "sl-SI",
    "Spanish (Argentina)": "es-AR",
    "Spanish (Bolivia)": "es-BO",
    "Spanish (Chile)": "es-CL",
    "Spanish (Colombia)": "es-CO",
    "Spanish (Costa Rica)": "es-CR",
    "Spanish (Dominican Republic)": "es-DO",
    "Spanish (Ecuador)": "es-EC",
    "Spanish (El Salvador)": "es-SV",
    "Spanish (Guatemala)": "es-GT",
    "Spanish (Honduras)": "es-HN",
    "Spanish (Mexico)": "es-MX",
    "Spanish (Nicaragua)": "es-NI",
    "Spanish (Panama)": "es-PA",
    "Spanish (Paraguay)": "es-PY",
    "Spanish (Peru)": "es-PE",
    "Spanish (Puerto Rico)": "es-PR",
    "Spanish (Spain)": "es-ES",
    "Spanish (United States)": "es-US",
    "Spanish (Uruguay)": "es-UY",
    "Spanish (Venezuela)": "es-VE",
    "Swedish": "sv-SE",
    "Turkish": "tr-TR",
    "Zulu": "zu-ZA"
}

# Create the main window
root = tk.Tk()
root.title("Speech Recognition Search malwae Checker")
root.configure(bg='#8400ff')  # Set background color to pink
root.geometry("800x500")
# Create a label
label = tk.Label(root, text="Press the button and speak your search query:",font=("Arial", 14), bg='#8400ff', fg='#fff')
label.pack(pady=10)

# Create a dropdown list for language selection
language_var = tk.StringVar(root)
language_var.set("en-US")  # Default language

language_menu = tk.OptionMenu(root, language_var, *languages.values())
language_menu.config(bg='#8400ff', fg='white', activebackground='#a94dff', activeforeground='Black')
language_menu.pack(pady=10)

# Create a button to capture speech and perform a search
search_button = tk.Button(root, text="Search with Speech", command=search_with_speech, bg='#8400ff', fg='black')
search_button.pack(pady=10)

# Create a button to check URL safety
check_button = tk.Button(root, text="Check URL Safety", command=check_url_safety, bg='red', fg='Blue')
check_button.pack(pady=10)

# Create a text widget to display the recognized text
search_entry = tk.Text(root, width=500, height=10, font=("Arial", 14), bg='#a94dff', fg='black')
search_entry.pack(pady=10)

# Run the main loop
